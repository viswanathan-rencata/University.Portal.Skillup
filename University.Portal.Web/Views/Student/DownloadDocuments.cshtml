@using University.Portal.Data.Data.ViewModels;
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "_CommonLayout";
}

@model IEnumerable<DownloadGridDocument>;

@{
    <label style="margin-top:50px;font-size:x-large">Download Documents</label>
    if (Model != null && Model.Count() > 0)
    {
        <table id="table1" class="table table-bordered" style="margin-top:50px;width:100%" data-filter-control="true">
            <thead>
                <tr>
                    <th data-filter-control="input">S.No</th>
                    <th data-field="Document" data-filter-control="input" data- style="width:20%">Document</th>
                    <th data-field="CreatedOn" data-filter-control="input">Generated On</th>
                    <th style="width:80%;" data-field="Action">Action</th>

                </tr>
            </thead>
            <tbody>
                 @{
                    var i = 1;
                }
                @foreach (var item in Model)
                {
                    <tr>
                        <th>@(i)</th>
                        <th scope="row" style="width:80%;">@item.DocumentName</th>
                        <td>@item.CreatedOn.ToString("MM/dd/yyyy")</td>
                        <td style="width:20%">
                            <div class="d-flex align-items-center justify-content-evenly">
                                <a onclick="downloadDocument(@item.Id)" class="btn btn-primary gridbtn" id="downloadButton_@item.Id">Download Document                                    
                                </a>
                            </div>
                        </td>
                    </tr>
                    i++;
                }
            </tbody>
        </table>
    }
    else
    {
        <table class="table table-bordered" style="margin-top:50px">
            <thead>
                <tr>
                    <th>Student Name</th>
                    <th>Department</th>
                    <th>Class</th>
                    <th>Document</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="4" class="text-center">No Records Found!</td>
                </tr>
            </tbody>
        </table>
    }
}

<div style="float:right">
    <h6>Total Records (@Model.Count())</h6>
</div>

<script>
    $(function () {
        $('#table1').bootstrapTable();
        $('.fixed-table-loading').remove();

    });

    function downloadDocument(id) {
        
        $('#downloadButton_' + id)[0].innerHTML = '<i class="fa fa-refresh fa-spin"></i> Download Document';
        $('#downloadButton_' + id).addClass('disabled');
        
        $.ajax({
            type: "POST",
            url: "/Student/DownloadDocument",
            data: { 'id': id, },
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            dataType: "html",
            success: function (response) {
                openNewTab(JSON.parse(response).data);
                $('#downloadButton_' + id)[0].innerHTML = 'Download Document';
                $('#downloadButton_' + id).removeClass('disabled');
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    }

    function openNewTab(response) {
        var contentType = 'application/pdf';
        var sliceSize = 512;
        var byteCharacters = atob(response);
        var byteArrays = [];
        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            var slice = byteCharacters.slice(offset, offset + sliceSize);
            var byteNumbers = new Array(slice.length);
            for (var i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }
            var byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }
        var blob = new Blob(byteArrays, { type: contentType });
        blob = b64toBlob(response, contentType);
        var blobUrl = URL.createObjectURL(blob);
        window.open(blobUrl);
    }

    function b64toBlob(b64Data, contentType = '', sliceSize = 512) {
        const byteCharacters = atob(b64Data);
        const byteArrays = [];
        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            const slice = byteCharacters.slice(offset, offset + sliceSize);
            const byteNumbers = new Array(slice.length);
            for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }
        const blob = new Blob(byteArrays, { type: contentType });
        return blob;
    }

</script>